[
  {
    "label": "a-box",
    "name": "Box",
    "documentation": "The box primitive creates shapes such as boxes, cubes, or walls.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "depth",
        "description": "Component Mapping: `geometry.depth` \n\n Default: `1`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-depth",
        "description": "Component Mapping: `geometry.segmentsDepth` \n\n Default: `1`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `1`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `1`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `geometry.width` \n\n Default: `1`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-camera",
    "name": "Camera",
    "documentation": "The camera primitive determines what the user sees. We can change the viewport by modifying the camera entity’s position and rotation.",
    "attributes": [
      {
        "name": "far",
        "description": "Component Mapping: `camera.far` \n\n Default: `10000`"
      },
      {
        "name": "fov",
        "description": "Component Mapping: `camera.fov` \n\n Default: `80`"
      },
      {
        "name": "look-controls-enabled",
        "description": "Component Mapping: `look-controls.enabled` \n\n Default: `true`"
      },
      {
        "name": "near",
        "description": "Component Mapping: `camera.near` \n\n Default: `0.5`"
      },
      {
        "name": "reverse-mouse-drag",
        "description": "Component Mapping: `look-controls.reverseMouseDrag` \n\n Default: `false`"
      },
      {
        "name": "wasd-controls-enabled",
        "description": "Component Mapping: `wasd-controls.enabled` \n\n Default: `true`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-circle",
    "name": "Circle",
    "documentation": "The circle primitive creates circles surfaces using the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with the type set to **circle.**",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments",
        "description": "Component Mapping: `geometry.segments` \n\n Default: `32`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `360`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-collada-model",
    "name": "Collada Model",
    "documentation": ""
  },
  {
    "label": "a-cone",
    "name": "Cone",
    "documentation": "The cone primitive creates a cone shape.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "open-ended",
        "description": "Component Mapping: `geometry.openEnded` \n\n Default: `false`"
      },
      {
        "name": "radius-bottom",
        "description": "Component Mapping: `geometry.radiusBottom` \n\n Default: `1`"
      },
      {
        "name": "radius-top",
        "description": "Component Mapping: `geometry.radiusTop` \n\n Default: `0.8`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `18`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `36`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `360`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-cursor",
    "name": "Cursor",
    "documentation": "The cursor primitive is a reticle that allows for clicking and basic interactivity with a scene on devices that do not have a hand controller. The default appearance is a ring geometry. The cursor is usually placed as a child of the camera. Read the [cursor component](https://aframe.io/docs/0.9.0/components/cursor.html) documentation for detailed information about how the cursor works and how to use the cursor.",
    "attributes": [
      {
        "name": "far",
        "description": "Component Mapping: `raycaster.far` \n\n Default: `1000`"
      },
      {
        "name": "fuse",
        "description": "Component Mapping: `cursor.fuse` \n\n Default: `false`"
      },
      {
        "name": "fuse-timeout",
        "description": "Component Mapping: `cursor.fuseTimeout` \n\n Default: `1500`"
      },
      {
        "name": "interval",
        "description": "Component Mapping: `raycaster.interval` \n\n Default: `100`"
      },
      {
        "name": "objects",
        "description": "Component Mapping: `raycaster.objects` \n\n Default: `100`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-curvedimage",
    "name": "Curved Image",
    "documentation": "The curved image primitive creates images that bend around the user. Curved images arranged around the camera can be pleasing for legibility since each pixel sits at the same distance from the user. They can be a better choice than angled flat planes for complex layouts because they ensure a smooth surface rather than a series of awkward seams between planes.\n\nUnder the hood, a curved image is a double-sided open-ended cylinder with textures mapped to the inside of the cylinder.",
    "attributes": [
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "opacity",
        "description": "Component Mapping: `material.opacity` \n\n Default: `1`"
      },
      {
        "name": "open-ended",
        "description": "Component Mapping: `geometry.openEnded` \n\n Default: `true`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `2`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `None`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `18`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `48`"
      },
      {
        "name": "shader",
        "description": "Component Mapping: `material.shader` \n\n Default: `flat`"
      },
      {
        "name": "side",
        "description": "Component Mapping: `material.side` \n\n Default: `double`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `270`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "transparent",
        "description": "Component Mapping: `material.transparent` \n\n Default: `true`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-cylinder",
    "name": "Cylinder",
    "documentation": "The cylinder primitive is used to create tubes and curved surfaces.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "open-ended",
        "description": "Component Mapping: `geometry.openEnded` \n\n Default: `false`"
      },
      {
        "name": "radius-bottom",
        "description": "Component Mapping: `geometry.radiusBottom` \n\n Default: `1`"
      },
      {
        "name": "radius-top",
        "description": "Component Mapping: `geometry.radiusTop` \n\n Default: `0.8`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `18`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `36`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `360`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-dodecahedron",
    "name": "Dodecahedron",
    "documentation": "",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "open-ended",
        "description": "Component Mapping: `geometry.openEnded` \n\n Default: `false`"
      },
      {
        "name": "radius-bottom",
        "description": "Component Mapping: `geometry.radiusBottom` \n\n Default: `1`"
      },
      {
        "name": "radius-top",
        "description": "Component Mapping: `geometry.radiusTop` \n\n Default: `0.8`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `18`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `36`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `360`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-gltf-model",
    "name": "gltf Model",
    "documentation": "The glTF model primitive displays a 3D glTF model created from a 3D modeling program or downloaded from the web.",
    "attributes": [
      {
        "name": "src",
        "description": "Component Mapping: `gltf-model.src` \n\n Default: `null`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-icosahedron",
    "name": "Icosahedron",
    "documentation": "",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "detail",
        "description": "Component Mapping: `geometry.detail` \n\n Default: `0`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-image",
    "name": "Image",
    "documentation": "The image primitive shows an image on a flat plane.",
    "attributes": [
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "opacity",
        "description": "Component Mapping: `material.opacity` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `None`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `1`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `1`"
      },
      {
        "name": "shader",
        "description": "Component Mapping: `material.shader` \n\n Default: `flat`"
      },
      {
        "name": "side",
        "description": "Component Mapping: `material.side` \n\n Default: `front`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "transparent",
        "description": "Component Mapping: `material.transparent` \n\n Default: `true`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `geometry.width` \n\n Default: `1`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-light",
    "name": "Light",
    "documentation": "A light changes the lighting and shading of the scene.",
    "attributes": [
      {
        "name": "angle",
        "description": "Component Mapping: `light.angle` \n\n Default: `60`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `light.color` \n\n Default: `#fff`"
      },
      {
        "name": "decay",
        "description": "Component Mapping: `light.decay` \n\n Default: `1`"
      },
      {
        "name": "distance",
        "description": "Component Mapping: `light.distance` \n\n Default: `0.0`"
      },
      {
        "name": "ground-color",
        "description": "Component Mapping: `light.groundColor` \n\n Default: `#fff`"
      },
      {
        "name": "intensity",
        "description": "Component Mapping: `light.intensity` \n\n Default: `1.0`"
      },
      {
        "name": "penumbra",
        "description": "Component Mapping: `light.penumbra` \n\n Default: `0.0`"
      },
      {
        "name": "type",
        "description": "Component Mapping: `light.type` \n\n Default: `directional`"
      },
      {
        "name": "target",
        "description": "Component Mapping: `light.target` \n\n Default: `null`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-link",
    "name": "Link",
    "documentation": "The link primitive provides a compact API to define links that resembles the traditional **\u003ca\u003e** tag.",
    "attributes": [
      {
        "name": "href",
        "description": "Component Mapping: `link.href` \n\n Default: ``"
      },
      {
        "name": "title",
        "description": "Component Mapping: `link.title` \n\n Default: ``"
      },
      {
        "name": "src",
        "description": "Component Mapping: `link.src` \n\n Default: ``"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-obj-model",
    "name": "OBJ Model",
    "documentation": "The .OBJ model primitive displays a 3D Wavefront model.",
    "attributes": [
      {
        "name": "mtl",
        "description": "Component Mapping: `obj-model.mtl` \n\n Default: `null`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `obj-model.obj` \n\n Default: `null`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-octahedron",
    "name": "Octahedron",
    "documentation": "",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "detail",
        "description": "Component Mapping: `geometry.detail` \n\n Default: `0`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-plane",
    "name": "Plane",
    "documentation": "The plane primitive creates flat surfaces using the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with the type set to **plane**.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `1`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `1`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `geometry.width` \n\n Default: `1`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-ring",
    "name": "Ring",
    "documentation": "The ring primitive creates a ring or disc shape.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "radius-inner",
        "description": "Component Mapping: `geometry.radiusInner` \n\n Default: `0.8`"
      },
      {
        "name": "radius-outer",
        "description": "Component Mapping: `geometry.radiusOuter` \n\n Default: `1.2`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-phi",
        "description": "Component Mapping: `geometry.segmentsPhi` \n\n Default: `10`"
      },
      {
        "name": "segments-theta",
        "description": "Component Mapping: `geometry.segmentsTheta` \n\n Default: `32`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `360`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-sky",
    "name": "Sky",
    "documentation": "The sky primitive adds a background color or 360° image to a scene. A sky is a large sphere with a color or texture mapped to the inside.",
    "attributes": [
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "opacity",
        "description": "Component Mapping: `material.opacity` \n\n Default: `1`"
      },
      {
        "name": "phi-length",
        "description": "Component Mapping: `geometry.phiLength` \n\n Default: `360`"
      },
      {
        "name": "phi-start",
        "description": "Component Mapping: `geometry.phiStart` \n\n Default: `0`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `5000`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `None`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `20`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `64`"
      },
      {
        "name": "shader",
        "description": "Component Mapping: `material.shader` \n\n Default: `flat`"
      },
      {
        "name": "side",
        "description": "Component Mapping: `material.side` \n\n Default: `front`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `180`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "transparent",
        "description": "Component Mapping: `material.transparent` \n\n Default: `false`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-sound",
    "name": "Sound",
    "documentation": "The sound primitive wraps the [sound component](https://aframe.io/docs/0.9.0/components/sound.html).",
    "attributes": [
      {
        "name": "autoplay",
        "description": "Component Mapping: `sound.autoplay` \n\n Default: `false`"
      },
      {
        "name": "loop",
        "description": "Component Mapping: `sound.loop` \n\n Default: `false`"
      },
      {
        "name": "on",
        "description": "Component Mapping: `sound.on` \n\n Default: `null`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `sound.src` \n\n Default: `null`"
      },
      {
        "name": "volume",
        "description": "Component Mapping: `sound.volume` \n\n Default: `1`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-sphere",
    "name": "Sphere",
    "documentation": "The sphere primitive creates a spherical or polyhedron shapes. It wraps an entity that prescribes the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with its geometric primitive set to **sphere**.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "phi-length",
        "description": "Component Mapping: `geometry.phiLength` \n\n Default: `360`"
      },
      {
        "name": "phi-start",
        "description": "Component Mapping: `geometry.phiStart` \n\n Default: `0`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `18`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `36`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "theta-length",
        "description": "Component Mapping: `geometry.thetaLength` \n\n Default: `180`"
      },
      {
        "name": "theta-start",
        "description": "Component Mapping: `geometry.thetaStart` \n\n Default: `0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-text",
    "name": "Text",
    "documentation": "Wraps the [text component](https://aframe.io/docs/0.9.0/components/text.html).",
    "attributes": [
      {
        "name": "align",
        "description": "Component Mapping: `text.align` \n\n Default: `undefined`"
      },
      {
        "name": "alpha-test",
        "description": "Component Mapping: `text.alphaTest` \n\n Default: `undefined`"
      },
      {
        "name": "anchor",
        "description": "Component Mapping: `text.anchor` \n\n Default: `undefined`"
      },
      {
        "name": "baseline",
        "description": "Component Mapping: `text.baseline` \n\n Default: `undefined`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `text.color` \n\n Default: `undefined`"
      },
      {
        "name": "font",
        "description": "Component Mapping: `text.font` \n\n Default: `undefined`"
      },
      {
        "name": "font-image",
        "description": "Component Mapping: `text.fontImage` \n\n Default: `undefined`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `text.height` \n\n Default: `undefined`"
      },
      {
        "name": "letter-spacing",
        "description": "Component Mapping: `text.letterSpacing` \n\n Default: `undefined`"
      },
      {
        "name": "line-height",
        "description": "Component Mapping: `text.lineHeight` \n\n Default: `undefined`"
      },
      {
        "name": "opacity",
        "description": "Component Mapping: `text.opacity` \n\n Default: `undefined`"
      },
      {
        "name": "shader",
        "description": "Component Mapping: `text.shader` \n\n Default: `undefined`"
      },
      {
        "name": "side",
        "description": "Component Mapping: `text.side` \n\n Default: `undefined`"
      },
      {
        "name": "tab-size",
        "description": "Component Mapping: `text.tabSize` \n\n Default: `undefined`"
      },
      {
        "name": "transparent",
        "description": "Component Mapping: `text.transparent` \n\n Default: `undefined`"
      },
      {
        "name": "value",
        "description": "Component Mapping: `text.value` \n\n Default: `undefined`"
      },
      {
        "name": "white-space",
        "description": "Component Mapping: `text.whiteSpace` \n\n Default: `undefined`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `text.width` \n\n Default: `undefined`"
      },
      {
        "name": "wrap-count",
        "description": "Component Mapping: `text.wrapCount` \n\n Default: `undefined`"
      },
      {
        "name": "wrap-pixels",
        "description": "Component Mapping: `text.wrapPixels` \n\n Default: `undefined`"
      },
      {
        "name": "z-offset",
        "description": "Component Mapping: `text.zOffset` \n\n Default: `undefined`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-tetrahedron",
    "name": "Tetrahedron",
    "documentation": "",
    "attributes": []
  },
  {
    "label": "a-torus-knot",
    "name": "Torus Knot",
    "documentation": "The torus knot primitive creates pretzel shapes using the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with the type set to **torusKnot**.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "p",
        "description": "Component Mapping: `geometry.p` \n\n Default: `2`"
      },
      {
        "name": "q",
        "description": "Component Mapping: `geometry.q` \n\n Default: `3`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "radius-tubular",
        "description": "Component Mapping: `geometry.radiusTubular` \n\n Default: `0.2`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `8`"
      },
      {
        "name": "segments-tubular",
        "description": "Component Mapping: `geometry.segmentsTubular` \n\n Default: `100`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-torus",
    "name": "Torus",
    "documentation": "The torus primitive creates donut or tube shapes using the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with the type set to **torus**.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "arc",
        "description": "Component Mapping: `geometry.arc` \n\n Default: `360`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `1`"
      },
      {
        "name": "radius-tubular",
        "description": "Component Mapping: `geometry.radiusTubular` \n\n Default: `0.2`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-radial",
        "description": "Component Mapping: `geometry.segmentsRadial` \n\n Default: `36`"
      },
      {
        "name": "segments-tubular",
        "description": "Component Mapping: `geometry.segmentsTubular` \n\n Default: `32`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-triangle",
    "name": "Triangle",
    "documentation": "The triangle primitive creates triangle surfaces using the [geometry](https://aframe.io/docs/0.9.0/components/geometry.html) component with the type set to **triangle**.",
    "attributes": [
      {
        "name": "ambient-occlusion-map",
        "description": "Component Mapping: `material.ambientOcclusionMap` \n\n Default: `None`"
      },
      {
        "name": "ambient-occlusion-map-intensity",
        "description": "Component Mapping: `material.ambientOcclusionMapIntensity` \n\n Default: `1`"
      },
      {
        "name": "ambient-occlusion-texture-offset",
        "description": "Component Mapping: `material.ambientOcclusionTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "ambient-occlusion-texture-repeat",
        "description": "Component Mapping: `material.ambientOcclusionTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "displacement-bias",
        "description": "Component Mapping: `material.displacementBias` \n\n Default: `0.5`"
      },
      {
        "name": "displacement-map",
        "description": "Component Mapping: `material.displacementMap` \n\n Default: `None`"
      },
      {
        "name": "displacement-scale",
        "description": "Component Mapping: `material.displacementScale` \n\n Default: `1`"
      },
      {
        "name": "displacement-texture-offset",
        "description": "Component Mapping: `material.displacementTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "displacement-texture-repeat",
        "description": "Component Mapping: `material.displacementTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "env-map",
        "description": "Component Mapping: `material.envMap` \n\n Default: `None`"
      },
      {
        "name": "fog",
        "description": "Component Mapping: `material.fog` \n\n Default: `true`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `material.height` \n\n Default: `256`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "normal-map",
        "description": "Component Mapping: `material.normalMap` \n\n Default: `None`"
      },
      {
        "name": "normal-scale",
        "description": "Component Mapping: `material.normalScale` \n\n Default: `1 1`"
      },
      {
        "name": "normal-texture-offset",
        "description": "Component Mapping: `material.normalTextureOffset` \n\n Default: `0 0`"
      },
      {
        "name": "normal-texture-repeat",
        "description": "Component Mapping: `material.normalTextureRepeat` \n\n Default: `1 1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `1 1`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "spherical-env-map",
        "description": "Component Mapping: `material.sphericalEnvMap` \n\n Default: `None`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "vertex-a",
        "description": "Component Mapping: `geometry.vertexA` \n\n Default: `0  0.5 0`"
      },
      {
        "name": "vertex-b",
        "description": "Component Mapping: `geometry.vertexB` \n\n Default: `-0.5 -0.5 0`"
      },
      {
        "name": "vertex-c",
        "description": "Component Mapping: `geometry.vertexC` \n\n Default: `0.5 -0.5 0`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `material.width` \n\n Default: `512`"
      },
      {
        "name": "wireframe",
        "description": "Component Mapping: `material.wireframe` \n\n Default: `false`"
      },
      {
        "name": "wireframe-linewidth",
        "description": "Component Mapping: `material.wireframeLinewidth` \n\n Default: `2`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-video",
    "name": "Video",
    "documentation": "The video primitive plays a video as a texture on a flat plane.",
    "attributes": [
      {
        "name": "color",
        "description": "Component Mapping: `material.color` \n\n Default: `#FFF`"
      },
      {
        "name": "height",
        "description": "Component Mapping: `geometry.height` \n\n Default: `1.75`"
      },
      {
        "name": "metalness",
        "description": "Component Mapping: `material.metalness` \n\n Default: `0`"
      },
      {
        "name": "opacity",
        "description": "Component Mapping: `material.opacity` \n\n Default: `1`"
      },
      {
        "name": "repeat",
        "description": "Component Mapping: `material.repeat` \n\n Default: `None`"
      },
      {
        "name": "roughness",
        "description": "Component Mapping: `material.roughness` \n\n Default: `0.5`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `1`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `1`"
      },
      {
        "name": "shader",
        "description": "Component Mapping: `material.shader` \n\n Default: `flat`"
      },
      {
        "name": "side",
        "description": "Component Mapping: `material.side` \n\n Default: `front`"
      },
      {
        "name": "src",
        "description": "Component Mapping: `material.src` \n\n Default: `None`"
      },
      {
        "name": "transparent",
        "description": "Component Mapping: `material.transparent` \n\n Default: `false`"
      },
      {
        "name": "width",
        "description": "Component Mapping: `geometry.width` \n\n Default: `3`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md)."
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data."
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text."
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad."
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn."
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead."
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)"
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md)."
      }
    ]
  },
  {
    "label": "a-videosphere",
    "name": "Videosphere",
    "documentation": "The videosphere primitive plays 360° videos in the background of the scene. Videospheres are a large sphere with the video texture mapped to the inside.",
    "attributes": [
      {
        "name": "autoplay",
        "description": "Component Mapping: `\u003cvideo\u003e.autoplay` \n\n Default: `true`"
      },
      {
        "name": "crossOrigin",
        "description": "Component Mapping: `\u003cvideo\u003e.crossOrigin` \n\n Default: `anonymous`"
      },
      {
        "name": "loop",
        "description": "Component Mapping: `\u003cvideo\u003e.loop` \n\n Default: `true`"
      },
      {
        "name": "radius",
        "description": "Component Mapping: `geometry.radius` \n\n Default: `5000`"
      },
      {
        "name": "segments-height",
        "description": "Component Mapping: `geometry.segmentsHeight` \n\n Default: `64`"
      },
      {
        "name": "segments-width",
        "description": "Component Mapping: `geometry.segmentsWidth` \n\n Default: `64`"
      },
      {
        "name": "animation",
        "description": "The animation component lets us animate and tween values including:"
      },
      {
        "name": "background",
        "description": "The background component sets a basic color background of a scene that is more performant than `a-sky` since geometry is not created. There are no undesired frustum culling issues when `a-sky` is further than the far plane of the camera. There are no unexpected occlusions either with far objects that might be behind of the sphere geometry of `a-sky`."
      },
      {
        "name": "camera",
        "description": "The camera component defines from which perspective the user views the scene. The camera is commonly paired with controls components that allow input devices to move and rotate the camera."
      },
      {
        "name": "daydream-controls",
        "description": "The daydream-controls component interfaces with the Google Daydream controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Daydream controller model that highlights the touched and/or pressed buttons (trackpad)."
      },
      {
        "name": "cursor",
        "description": "The cursor component provides hover and click states for interaction on top of the [raycaster component](./raycaster.md). The cursor component can be used for both gaze-based and controller-based interactions, but the appearance needs to be configured depending on the use case. The [`\u003ca-cursor\u003e` primitive](../primitives/a-cursor.md) provides a default reticle appearance for a gaze-based cursor, and the [laser-controls component](./laser-controls.md) configures the cursor for all controllers."
      },
      {
        "name": "debug",
        "description": "The debug component enables component-to-DOM serialization."
      },
      {
        "name": "embedded",
        "description": "The embedded component removes fullscreen CSS styles from A-Frame\u0027s `\u003ccanvas\u003e` element, making it easier to embed within the layout of an existing webpage. Embedding removes the default fixed positioning from the canvas and makes the Enter VR button smaller."
      },
      {
        "name": "fog",
        "description": "The fog component obscures entities in fog given distance from the camera. The fog component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "geometry",
        "description": "The geometry component provides a basic shape for an entity. The `primitive` property defines the general shape. Geometric primitives, in computer graphics, are irreducible basic shapes. A material component is commonly defined to provide a appearance alongside the shape to create a complete mesh."
      },
      {
        "name": "gearvr-controls",
        "description": "The gearvr-controls component interfaces with the Samsung/Oculus Gear VR controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Gear VR controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "gltf-model",
        "description": "[glTF](https://www.khronos.org/gltf) (GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies."
      },
      {
        "name": "hand-controls",
        "description": "The hand-controls component provides tracked hands (using a prescribed model) with animated gestures. hand-controls wraps the [vive-controls](./vive-controls.md) and [oculus-touch-controls](./oculus-touch-controls.md) which in turn wrap the [tracked-controls component](./tracked-controls.md). By specifying just `hand-controls`, we have something that works well with both Vive and Rift. The component gives extra events and handles hand animations and poses."
      },
      {
        "name": "keyboard-shortcuts",
        "description": "The keyboard-shortcuts component toggles global keyboard shortcuts. The keyboard-shortcuts component applies only to the [`\u003ca-scene\u003e` element](../core/scene.md)."
      },
      {
        "name": "light",
        "description": "The light component defines the entity as a source of light. Light affects all materials that have not specified a flat shading model with `shader: flat`. Note that lights are computationally expensive we should limit number of lights in a scene."
      },
      {
        "name": "laser-controls",
        "description": "The laser-controls component provides tracked controls with a laser or ray cursor shooting out to be used for input and interactions. _DoF_ stands for [degrees of freedom](http://www.roadtovr.com/introduction-positional-tracking-degrees-freedom-dof/). Because they only require rotation and some form of input, laser-based interactions scale well across 0 DoF (gaze-based, Cardboard), 3 DoF (Daydream, GearVR with controllers), and 6 DoF (Vive, Oculus Touch). If desired, we can get a consistent form of interaction that works across all VR platforms with a single line of HTML."
      },
      {
        "name": "line",
        "description": "The line component draws a line given a start coordinate and end coordinate using [`THREE.Line`](https://threejs.org/docs/#api/objects/Line)."
      },
      {
        "name": "link",
        "description": "The link component connects between experiences and allows for traversing between VR web pages. When activated via an event, the link component sends the user to a different page, just like a normal web page redirect. To maintain VR across pages, the following conditions must apply:"
      },
      {
        "name": "loading-screen",
        "description": "The loading screen component configures the loading screen visual style."
      },
      {
        "name": "look-controls",
        "description": "The look-controls component:"
      },
      {
        "name": "material",
        "description": "The material component gives appearance to an entity. We can define properties such as color, opacity, or texture. This is often paired with the [geometry component](./geometry.md) which provides shape."
      },
      {
        "name": "obj-model",
        "description": "The obj-model component loads a 3D model and material using a [Wavefront](https://en.wikipedia.org/wiki/Wavefront_.obj_file) (.OBJ) file and a .MTL file."
      },
      {
        "name": "oculus-touch-controls",
        "description": "The oculus-touch-controls component interfaces with the Oculus Touch controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Touch controller model."
      },
      {
        "name": "oculus-go-controls",
        "description": "The oculus-go-controls component interfaces with the Oculus Go controllers. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Oculus Go controller model that highlights the touched and/or pressed buttons (trackpad, trigger)."
      },
      {
        "name": "position",
        "description": "The position component places entities at certain spots in 3D space. Position takes a coordinate value as three space-delimited numbers."
      },
      {
        "name": "pool",
        "description": "The pool component allows for [object pooling](https://en.wikipedia.org/wiki/Object_pool_pattern). This gives us a reusable pool of entities to avoid creating and destroying the same kind of entities in dynamic scenes. Object pooling helps reduce GC pauses."
      },
      {
        "name": "raycaster",
        "description": "The raycaster component provides line-based intersection testing with a [raycaster](https://en.wikipedia.org/wiki/Ray_casting). Raycasting is the method of extending a line from an origin towards a direction, and checking whether that line intersects with other entites."
      },
      {
        "name": "renderer",
        "description": "The `renderer` system configures a scene\u0027s [THREE.WebGLRenderer](https://threejs.org/docs/#api/renderers/WebGLRenderer) instance. It also configures presentation attributes when entering WebVR/WebXR."
      },
      {
        "name": "scale",
        "description": "The scale component defines a shrinking, stretching, or skewing transformation of an entity. It takes three scaling factors for the X, Y, and Z axes."
      },
      {
        "name": "rotation",
        "description": "The rotation component defines the orientation of an entity in degrees. It takes the pitch (`x`), yaw (`y`), and roll (`z`) as three space-delimited numbers indicating degrees of rotation."
      },
      {
        "name": "screenshot",
        "description": "The screenshot component lets us take different types of screenshots with keyboard shortcuts. A-Frame attaches this component to the scene by default so we don\u0027t have to do anything to use the component."
      },
      {
        "name": "shadow",
        "description": "The shadow component enables shadows for an entity and its children. Receiving shadows from surrounding objects and casting shadows onto other objects may (and often should) be enabled independently."
      },
      {
        "name": "stats",
        "description": "The stats component displays a UI with performance-related metrics. The stats component applies only to the [`<a-scene>` element](../core/scene.md).",
        "default": ""
      },
      {
        "name": "sound",
        "description": "The sound component defines the entity as a source of sound or audio. The sound component is positional and is thus affected by the [components-position](./position.md).",
        "default": ""
      },
      {
        "name": "tracked-controls",
        "description": "The tracked-controls component interfaces with tracked controllers. tracked-controls uses the Gamepad API to handle tracked controllers, and is abstracted by the [hand-controls component](./hand-controls.md) as well as the [vive-controls](./vive-controls.md), [oculus-touch-controls](./oculus-touch-controls.md), [windows-motion-controls](./windows-motion-controls.md), and [daydream-controls](./daydream-controls.md) components. This component elects the appropriate controller, applies pose to the entity, observes buttons state and emits appropriate events. For non-6DOF controllers such as [daydream-controls](./daydream-controls.md), a primitive arm model is used to emulate positional data.",
        "default": ""
      },
      {
        "name": "text",
        "description": "The text component renders signed distance field (SDF) font text.",
        "default": ""
      },
      {
        "name": "vive-controls",
        "description": "The vive-controls component interfaces with the HTC Vive controllers/wands. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a Vive controller model that highlights the pressed buttons (trigger, grip, menu, system) and trackpad.",
        "default": ""
      },
      {
        "name": "visible",
        "description": "The visible component determines whether to render an entity. If set to `false`, then the entity will not be visible nor drawn.",
        "default": ""
      },
      {
        "name": "vive-focus-controls",
        "description": "The vive-focus-controls component interfaces with the Vive Focus controller. It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and an Vive Focus controller model that highlights the touched and/or pressed buttons (trackpad, trigger).",
        "default": ""
      },
      {
        "name": "vr-mode-ui",
        "description": "The vr-mode-ui component allows disabling of UI such as an Enter VR button, compatibility modal, and orientation modal for mobile. The vr-mode-ui component applies only to the [`<a-scene>` element](../core/scene.md). If we wish to simply toggle the UI, use CSS instead.",
        "default": ""
      },
      {
        "name": "windows-motion-controls",
        "description": "The windows-motion-controls component interfaces with any spatial controllers exposed through Windows Mixed Reality as Spatial Input Sources (such as Motion Controllers). It wraps the [tracked-controls component](./tracked-controls.md) while adding button mappings, events, and a controller model that highlights applies position/rotation transforms to the pressed buttons (trigger, grip, menu, thumbstick, trackpad) and moved axes (thumbstick and trackpad.)",
        "default": ""
      },
      {
        "name": "wasd-controls",
        "description": "The wasd-controls component controls an entity with the WASD or arrow keyboard keys. The wasd-controls component is commonly attached to an entity with the [camera component](./camera.md).",
        "default": ""
      }
    ]
  }
]